DEFINITION MODULE Target;
  IMPORT Host;

  (* This module defines those characteristics of the Target computer's *)
  (* architecture and instruction set that are required within the other modules *)
  (* of the compiler *)
  (* It also defines the locations of the run-time support routines within the *)
  (* object programs generated by the compiler. *)

        (* --------------- Word Structure ------------------ *)
  CONST WordLength = 16; (* bits per word *)

  CONST MaxInteger = 77777B-1; (* i.e. 2**15 - 1 *)
        Undefined = -MaxInteger-1;

  TYPE Ordinal = [0..255]; (* Target uses ASCII *)

    (* The following procedure provides a mapping from ASCII ordinal values to *)
    (* Target ordinal values. *)

  PROCEDURE OrdinalOf(C: Host.AsciiOrdinal): Ordinal;

    (* ----------- Memory Dimensions ---- *)

  CONST MaximumAddress = 177777B;
  TYPE AddressRange = [0..MaximumAddress];

    (* --------------- Registar Organization -------------- *)
  TYPE Register = (BP, FP, MP, SP, PC, PSR);
       AddressRegister = [BP..SP];

    (* ----------------- PSR Organization ---------------- *)
  
  CONST C = 0; (* Checks On bit *)
        V = 1; (* Overflow bit *)
        E = 2; (* Range error bit *)
        H = 3; (* Halted bit *)
        M = 4; (* Memory violation bit *)
        R = 5; (* Register violation bit *)
        I = 6; (* Illegal instruction bit *)

    (* --------- Instruction Set ------------------- *)

  TYPE OrderCode = (NOOP, LOAD, LOADL, LOADR, LOADA, LOADI,
                    STORE, STORER, STOREI, STZ,
                    INCR, INCREG, MOVE, SLL, SRL,
                    ADD, SUB, MUL, DVD, DREM, LAND, LOR, INV, NEG,
                    CLT, CLE, CEQ, CNE,
                    BRN, BIDX, BZE, BNZ, BNG, BPZ, BVS, BES,
                    MARK, CALL, EXT, SETSP, SETPSR, CHECK, HLT,
                    CHIN, CHOUT);

    (* ---------- Instruction Format -------------------- *)

  TYPE Level = [0..77B];
  TYPE Instruction = RECORD
                       OpCode: OrderCode; R; AddressRegister; L: Level;
                       N: Integer
                     END;

    (* ------ Object Program Addresses ---------- *)

  TYPE SystemRoutines = (InitializeIO, FinalizeIO, ReadInteger, WriteInteger);
  PROCEDURE AddressOf(Routine: SytemRoutines): AddressRange;

  CONST FirstAvailable = 200;

END Target.
